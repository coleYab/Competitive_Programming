# Problem: Clone Graph - https://leetcode.com/problems/clone-graph/

/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    Node* cloneGraph(Node* node) {
        if (!node) return nullptr;
        // Node *root = new Node(node.val);
        map<int, Node*> mp;
        
        auto clone = [&](auto &&self, Node *from) -> Node* {
            if (!from) return nullptr;
            Node *to = new Node(from->val);
            if (mp.find(from->val) != mp.end()) return mp[from->val];
            mp[to->val] = to;
            for (auto ch : from->neighbors) {
                // auto chh = self(self, ch);
                to->neighbors.push_back(self(self, ch));
            }
            return to;
        };
        
        return clone(clone, node);
    }
};