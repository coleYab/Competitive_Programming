# Problem: Longest Word in Dictionary - https://leetcode.com/problems/longest-word-in-dictionary/


struct TrieNode {
    TrieNode() {
        chs = vector<TrieNode*>(26, nullptr);
        end = false;
    }
    vector<TrieNode*> chs;
    bool end;
};

class Trie {
public:
    TrieNode *root;
    Trie() {
        root = new TrieNode();
    }
    
    void insert(string word) {
        TrieNode *rt = root;
        int n = word.size();
        for (int i = 0; i < n; i++) {
            int ii = word[i] - 'a';
            if (!rt->chs[ii]) rt->chs[ii] = new TrieNode();
            rt = rt->chs[ii];
        }
        rt->end = true;    
    }
    
    bool search(string word) {
        int n = word.size();
        TrieNode *rt = root;
        for (int i = 0; i < n; i++) {
            int ii = word[i] - 'a';
            if (!rt->chs[ii]) return false;
            rt = rt->chs[ii];
        }
        return rt->end;  
    }
    
    bool startsWith(string p) {
        int n = p.size();
        TrieNode *rt = root;
        for (int i = 0; i < n; i++) {
            int ii = p[i] - 'a';
            if (!rt->chs[ii]) return false;
            rt = rt->chs[ii];
        }
        return true;
    }

    string get() {
        TrieNode *rt = root;
        string ans = "";
        function<void(TrieNode*, string&)> dfs = [&](TrieNode *rt, string &path) {
            if (!rt) {
                if (ans.size() <= path.size()) ans = path;
                return;
            }

            if (ans.size() < path.size()) ans = path;

            for (int i = 0; i < 26; i++) {
                if (rt->chs[i] && rt->chs[i]->end) {
                    TrieNode *ch = rt->chs[i];
                    path.push_back(('a' + i));
                    dfs(ch, path);
                    path.pop_back();
                }
            }
        };

        string path;
        dfs(rt, path);
        return ans;
    }
};

class Solution {
public:
    string longestWord(vector<string>& words) {
        Trie t;
        for (auto c : words) t.insert(c);
        return t.get();    
    }
};