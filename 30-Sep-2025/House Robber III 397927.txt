# Problem: House Robber III - https://leetcode.com/problems/house-robber-iii/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int rob(TreeNode *root) {
    auto dfs = [&](auto &&self, TreeNode *root) -> pair<int, int> {
      pair<int, int> ans{0, 0};

      if (!root) {
        return {0, 0};
      }
      auto left = self(self, root->left);
      auto right = self(self, root->right);

      ans.first = root->val + left.second + right.second;
      ans.second = max(left.first, left.second) + max(right.first, right.second);

      return ans;
    };

    auto rs = dfs(dfs, root);
    return max(rs.first, rs.second);
  }
};