# Problem: Circumference of a Tree - https://codeforces.com/gym/102694/problem/A

#include <bits/stdc++.h>

using namespace std;

const int N = 300005;
vector<int> adj[N];
bool vis[N];
int label[N];
int n;

pair<int, int> bfs(int node) {
	pair<int, int> ans(-1, 0);
	queue<pair<int, int>> que;

	que.push(make_pair(node, 0));

	while (que.empty() == false) {
		auto top = que.front();
		que.pop();
		vis[top.first] = true;
		label[top.first] = top.second;
		for (auto ch : adj[top.first]) {
			if (!vis[ch]) {
				que.push(make_pair(ch, top.second + 1));
			}
		}
	}

	for (int i = 1; i <= n; i++) {
		vis[i] = false;
		if (ans.first <= label[i]) {
			ans.first = label[i];
			ans.second = i;
		}
	}
	return ans;
}

int main() {
	cin >> n;
	for (int i = 1; i <= n; i++) vis[n] = false;
	for (int i = 0; i < n - 1; i++) {
		int u, v;
		cin >> u >> v;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}

	auto fans = bfs(1);
	auto sans = bfs(fans.second);
	cout << sans.first * 3 << "\n";
}